#!/usr/bin/perl

use strict;
use warnings;

use Readonly;
use SDL;
use SDLx::App;
use SDL::Mouse;
use SDL::Video;
use SDL::Events;
use SDL::Event;
use OpenGL qw(:all);

use JGoff::App::Rubik;

Readonly my $TITLE  => 'OpenGL App';
Readonly my $WIDTH  => 640;
Readonly my $HEIGHT => 400;

Readonly my $X => 0;
Readonly my $Y => 1;

my $sdl_app = SDLx::App->new(
  title	 => $TITLE,
  width	 => $WIDTH,
  height => $HEIGHT,
  gl     => 1
);
my $sdl_event = SDL::Event->new;

#   /
#  /
# z
# x -->
# y
# |
# V
#
#   4 -- 5
#  /    /|
# 0 -- 1 |
# | 6 -| 7
# |/   |/
# 2 -- 3

my $rubik = JGoff::App::Rubik->new(
  corners => [
    [ -1, -1, +1 ],
    [ +1, -1, +1 ],
    [ -1, +1, +1 ],
    [ +1, +1, +1 ],
    [ -1, -1, -1 ],
    [ +1, -1, -1 ],
    [ -1, +1, -1 ],
    [ +1, +1, -1 ],
  ],
  spacing => 0.1,
);

my ( $vertices, $cubes ) = $rubik->generate;

my @indices = (
  [ 4, 5, 6, 7 ],
  [ 1, 2, 6, 5 ],
  [ 0, 1, 5, 4 ],
  [ 0, 3, 2, 1 ],
  [ 0, 4, 7, 3 ],
  [ 2, 3, 7, 6 ],
);
my @vertices = (
  [ -1, -1, -1 ],
  [  1, -1, -1 ],
  [  1,  1, -1 ],
  [ -1,  1, -1 ],
  [ -1, -1,  1 ],
  [  1, -1,  1 ],
  [  1,  1,  1 ],
  [ -1,  1,  1 ]
);

$|++;

#                                                     /
#                                                    /
# Given 8 vertices laid out in this order ( x --> y z
#                                                 |
#                                                 v
#    4 -- 5
# 0 -- 1  |
# |  | |  |
# |  6 -- 7
# 2 -- 3
#
# interpolate between them to get the faces for 27 cubes.
#

#
# First, start off lerp'ing 9 quads
#
# Corners here are:
# ( [ x0, y0 ],
#   [ x1, y1 ], ...
#
sub _plane {
  my ( $corners, $x_spacing, $y_spacing ) = @_;

  my @panes;
  #
  # Use these to make it clear the last dimension is (x,y,z) tuples.
  #

  #
  # # Fill in the corners
  #
  @{ $panes[0][0] } = @{ $corners->[0] };
  @{ $panes[5][0] } = @{ $corners->[1] };
  @{ $panes[0][5] } = @{ $corners->[2] };
  @{ $panes[5][5] } = @{ $corners->[3] };

  # lerp between right and left
  my @x01 = _split_edge( $panes[0][0][$X], $panes[5][0][$X], $x_spacing );
  for my $idx ( 1 .. 4 ) {
    $panes[$idx][0][$X] = $x01[$idx];
  }
  my @x23 = _split_edge( $panes[0][5][$X], $panes[5][5][$X], $x_spacing );
  for my $idx ( 1 .. 4 ) {
    $panes[$idx][5][$X] = $x23[$idx];
  }

  # lerp between top and bottom
  my @x02 = _split_edge( $panes[0][0][$X], $panes[0][5][$X], $x_spacing );
  for my $idx ( 1 .. 4 ) {
    $panes[0][$idx][$X] = $x02[$idx];
  }
  my @x13 = _split_edge( $panes[5][0][$X], $panes[5][5][$X], $x_spacing );
  for my $idx ( 1 .. 4 ) {
    $panes[5][$idx][$X] = $x02[$idx];
  }

  # lerp remaining X values
  for my $idx ( 1 .. 4 ) {
    my @x01 =
      _split_edge( $panes[0][$idx][$X], $panes[5][$idx][$X], $x_spacing );
    for my $_idx ( 1 .. 4 ) {
      $panes[$idx][$_idx][$X] = $x01[$idx];
    }
  }

# Y coordinates now

  # lerp between right and left
  my @y01 = _split_edge( $panes[0][0][$Y], $panes[5][0][$Y], $y_spacing );
  for my $idx ( 1 .. 4 ) {
    $panes[$idx][0][$Y] = $x01[$idx];
  }
  my @y23 = _split_edge( $panes[0][5][$Y], $panes[5][5][$Y], $y_spacing );
  for my $idx ( 1 .. 4 ) {
    $panes[$idx][5][$Y] = $y23[$idx];
  }

  # lerp between top and bottom
  my @y02 = _split_edge( $panes[0][0][$Y], $panes[0][5][$Y], $y_spacing );
  for my $idx ( 1 .. 4 ) {
    $panes[0][$idx][$Y] = $y02[$idx];
  }
  my @y13 = _split_edge( $panes[5][0][$Y], $panes[5][5][$Y], $y_spacing );
  for my $idx ( 1 .. 4 ) {
    $panes[5][$idx][$Y] = $y02[$idx];
  }

  # lerp remaining Y values
  for my $idx ( 1 .. 4 ) {
    my @y01 =
      _split_edge( $panes[0][$idx][$Y], $panes[5][$idx][$Y], $y_spacing );
    for my $_idx ( 1 .. 4 ) {
      $panes[$idx][$_idx][$Y] = $y01[$idx];
    }
  }

  return @panes;
}

#
#  _-1
# 0   \
#  \   \
#   \ _-3
#    2

my @plane_verts = _plane( [ [ 0, 2 ],
                            [ 1, 0 ],
                            [ 2, 4 ],
                            [ 3, 3 ] ], 0.2, 0.2 );

# 0 -- 1
# |    |
# |    |
# 2 -- 3

my ( $facets, $flattened ) = $rubik->facets( [
  #[ 0.0, 0.0 ], [ 3.1, 0.0 ],
  #[ 0.0, 0.0 ], [ 2.2, -0.9 ],
  [ 0.5, 0.7 ], [ 2.2, -0.9 ],
  [ 0.0, 3.1 ], [ 3.1, 3.1 ]
] );

sub draw_facets {
  glBegin(GL_QUADS);
    for my $facet ( @$facets ) {
      for my $idx ( @{ $facet } ) {
        glVertex3d( $flattened->[$idx][$X], $flattened->[$idx][$Y], 0 );
      }
    }
  glEnd;
}

# 0-->   1--->  2--->  4--->
# +---+  +---+  +---+  +---+
# |   |--|   |--|   |--|   |
# +---+  +---+  +---+  +---+
#
# 26 - ( ( 4 - 1 ) * 2 ) / ( 4 - 1 ) = 5
#
# dx - ( ( $num_segments - 1 ) * $spacing ) / ( $num_segments )

sub _split_edge {
  my ( $x0, $x1, $spacing ) = @_;
  my $num_segments = 3;

  my $dx = $x1 - $x0;
#  my $side = $dx - ( ( $num_segments - 1 ) * $spacing ) / ( $num_segments - 1 );
  my $side = ( $dx - ( 2 * $spacing ) ) / 3;

  my $xa = $x0 + $side;
  my $xb = $xa + $spacing;
  my $xc = $xb + $side;
  my $xd = $xc + $spacing;

  return ( $x0,     $xa, $xb,     $xc, $xd,    $x1 );
}

#                               180 -- 181    182 -- 183    184 -- 185
#                                                                  191
#                        144 -- 145    146 -- 147    148 -- 149    197
#                                                           155    203
#                 108 -- 109    110 -- 111    112 -- 113    161    209
#                                                    119    167    215
#          72  -- 73     74 --  75     76 --  77     123    173
#                                             83     131    179
#     36 -- 37    38 -- 39 -- 40 -- 41        89     137
#                                   47        95     143
# 00 -- 01    02 -- 03    04 -- 05  53        101
# 06 -- 07    08 -- 09    10 -- 11  59        107
# 12 -- 13    14 -- 15    16 -- 17    
# 18 -- 19    20 -- 21    22 -- 23  65
#                                  / |
# 24 -- 25    26 -- 27    28 -- 29  71
#  |     |     |     |     |     | /
# 30 -- 31    32 -- 33    34 -- 35

my @xy = (
  [ 0, 1, 7, 6 ],
  [ 2, 3, 9, 8 ],
  [ 4, 5, 11, 10 ],

  [ 12, 13, 19, 18 ],
  [ 14, 15, 21, 20 ],
  [ 16, 17, 23, 22 ],

  [ 24, 25, 31, 30 ],
  [ 26, 27, 33, 32 ],
  [ 28, 29, 35, 34 ],
);

my @xz = (
  [ 5, 41, 47, 11 ],
  [ 77, 113, 119, 83 ],
  [ 149, 185, 191, 155 ],

  [ 17, 53, 59, 23 ],
  [ 89, 123, 131, 95 ],
  [ 161, 197, 203, 167 ],

  [ 29, 65, 71, 35 ],
  [ 101, 137, 143, 107 ],
  [ 173, 209, 215, 179 ],
);

my @yz = (
  [ 0, 36, 37, 1 ],
  [ 72, 108, 109, 73 ],
  [ 144, 180, 181, 145 ],

  [ 2, 39, 39, 3 ],
  [ 110, 146, 147, 111 ],
  [ 146, 182, 183, 147 ],

  [ 4, 40, 41, 5 ],
  [ 76, 112, 113, 77 ],
  [ 148, 184, 185, 149 ]
);

my @faces = ();
for my $depth ( 0 .. 5 ) {
  for my $xy ( @xy ) {
    push @faces, [ map { $_ + $depth * 36 } @{ $xy } ];
  }
}
for my $depth ( 0 .. 5 ) {
  for my $xz ( @xz ) {
    push @faces, [ map { $_ - $depth } @{ $xz } ];
  }
}
for my $depth ( 0 .. 5 ) {
  for my $yz ( @yz ) {
    push @faces, [ map { $_ + ( $depth * 6 ) } @{ $yz } ];
  }
}

# {{{ lerp_cube

# X right
# y down
# z back
#
#    4 -- 5
# 0 -- 1  |
# |  | |  |
# |  6 -- 7
# 2 -- 3

sub lerp_cube {
  my ( $vertices, $num_segments, $spacing ) = @_;

  my @cube = ();

  #
  # Populate the corners in the vertex order described above.
  #
  $cube[0][0][0] = [ @{ $vertices->[0] } ];
  $cube[5][0][0] = [ @{ $vertices->[1] } ];
  $cube[0][5][0] = [ @{ $vertices->[2] } ];
  $cube[5][5][0] = [ @{ $vertices->[3] } ];
  $cube[0][0][5] = [ @{ $vertices->[4] } ];
  $cube[5][0][5] = [ @{ $vertices->[5] } ];
  $cube[0][5][5] = [ @{ $vertices->[6] } ];
  $cube[5][5][5] = [ @{ $vertices->[7] } ];

  my ( $X, $Y, $Z ) = ( 0, 1, 2 );

  my @x01 = _split_line( $cube[0][0][0][$X], $cube[5][0][0][$X], $spacing );
  for my $idx ( 1 .. 4 ) {
    $cube[$idx][0][0][$X] = $x01[$idx];
  }
  my @x23 = _split_line( $cube[0][5][0][$X], $cube[5][5][0][$X], $spacing );
  for my $idx ( 1 .. 4 ) {
    $cube[$idx][0][5][$X] = $x01[$idx];
  }
  my @x02 = _split_line( $cube[0][0][0][$X], $cube[0][5][0][$X], $spacing );
  for my $idx ( 1 .. 4 ) {
    $cube[0][$idx][0][$X] = $x02[$idx];
  }
  my @x13 = _split_line( $cube[5][0][0][$X], $cube[5][5][0][$X], $spacing );
  for my $idx ( 1 .. 4 ) {
    $cube[5][$idx][5][$X] = $x13[$idx];
  }
}

# }}}

#   1
#  /|
# 0 |
# | |
# 2 |
#  \|
#   3

sub draw_pane {
  my @corners = (
    [ 0, 1, 0 ],
    [ 1, 0, 0 ],
    [ 0, 2, 0 ],
    [ 1, 3, 0 ],
  );
  my @vertex = ( 0, 1, 3, 2 );

  glBegin(GL_QUADS);
    for my $idx ( @vertex ) {
      glVertex3d( @{ $corners[ $idx ] } );
    }
  glEnd();
}

# {{{ draw_cube

sub draw_cube {
  glBegin(GL_QUADS);

  for my $indices ( @indices ) {
    for my $index ( @{ $indices } ) {
      glVertex3d( @{ $vertices[ $index ] } );
    }
  }

  glEnd;
}

# }}}

# {{{ draw_scene

sub draw_scene {
#  for my $x ( -1 .. 1 ) {
#    for my $y ( -1 .. 1 ) {
#      for my $z ( -1 .. 1 ) {
        glPushMatrix;
#        glTranslatef( $x * 3, $y * 3, $z * 3 );
        glColor3d( 1, 0, 0 );
        #draw_cube;
        #draw_pane;
        draw_facets;
        glPopMatrix;
#      }
#    }
#  }
}

# }}}

# {{{ handle_polls

sub handle_polls {
  SDL::Events::pump_events;

  while ( SDL::Events::poll_event( $sdl_event ) ) {
    my $type = $sdl_event->type;
    my $key = ( $type == 2 or $type == 3 ) ? $sdl_event->key_sym : '';

    if ( $type == 4 ) {
#      printf "You moved the mouse! x=%s y=%s xrel=%s yrel=%s\n",
#             $sdl_event->motion_x,
#             $sdl_event->motion_y,
#             $sdl_event->motion_xrel,
#             $sdl_event->motion_yrel
    }
#    elsif ( $type == 2 ) { print "You are pressing $key\n" }
#    elsif ( $type == 3 ) { print "You released $key\n" }
    elsif ( $type == 12 ) { exit }
    else { print "TYPE $type UNKNOWN!\n" }

    if ( $type == 2 ) {
      exit if $key eq "q" or $key eq "escape";
    }
  }
}

# }}}

glEnable( GL_DEPTH_TEST );
glMatrixMode( GL_PROJECTION );
glLoadIdentity;
gluPerspective( 60, $WIDTH / $HEIGHT, 1, 1000 );
glTranslatef( 0, 0, -20 );

while ( 1 ) {
  handle_polls;
  glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
  glRotatef( .1, 1, 1, 1 );
  draw_scene;
  $sdl_app->sync;
}
