#!/usr/bin/perl

use strict;
use warnings;

use Readonly;
use SDL;
use SDLx::App;
use SDL::Mouse;
use SDL::Video;
use SDL::Events;
use SDL::Event;
use OpenGL qw(:all);

use JGoff::App::Rubik;

Readonly my $TITLE  => 'OpenGL App';
Readonly my $WIDTH  => 640;
Readonly my $HEIGHT => 400;

Readonly my $X => 0;
Readonly my $Y => 1;

my $sdl_app = SDLx::App->new(
  title	 => $TITLE,
  width	 => $WIDTH,
  height => $HEIGHT,
  gl     => 1
);
my $sdl_event = SDL::Event->new;

my $rubik = JGoff::App::Rubik->new(
  spacing => 0.1,
);

$|++;

#                                                     /
#                                                    /
# Given 8 vertices laid out in this order ( x --> y z
#                                                 |
#                                                 v
#    4 -- 5
# 0 -- 1  |
# |  | |  |
# |  6 -- 7
# 2 -- 3
#
# interpolate between them to get the faces for 27 cubes.
#
# Note the important bit that these are freely-specified 3-D coordinates.
# If they were specified as just height-width-depth we could get away with
# just scaling. As it is we have to do some math, but it *does* mean that we
# can map our cubies onto any convex hexahedron. Which is exactly what a
# 4-D tesseract face will look like when projected down into 3-D.

my ( $cubies, $flattened_faces ) = $rubik->generate( [
#  [ 0.0, 0.0, 0.0 ], [ 3.1, 0.0, 0.0 ],
#  [ 0.0, 0.0, 0.0 ], [ 2.2, -0.9, 0.0 ],
#  [ 0.0, 0.0, 1.0 ], [ 3.1, 0.0, 1.0 ],
#  [ 0.0, 0.0, 1.0 ], [ 2.2, -0.9, 1.0 ],

  [ 0, 0, 0 ], [ 10, 0, 0 ],
  [ 0, 10, 0 ], [ 10, 10, 0 ],
  [ 0, 0, 10 ], [ 10, 0, 10 ],
  [ 0, 10, 10 ], [ 10, 10, 10 ],
] );

# {{{ draw_cubies

sub draw_cubies {
  glBegin(GL_QUADS);
    for my $cubie ( @{ $cubies } ) {
      for my $facet ( @{ $cubie } ) {
        for my $idx ( @{ $facet } ) {
          glVertex3d( @{ $flattened_faces->[ $idx ] } );
        }
      }
    }
  glEnd;
}

# }}}

# {{{ draw_scene

sub draw_scene {
  glPushMatrix;
  glColor3d( 1, 0, 0 );
  draw_cubies;
  glPopMatrix;
}

# }}}

# {{{ handle_polls

sub handle_polls {
  SDL::Events::pump_events;

  while ( SDL::Events::poll_event( $sdl_event ) ) {
    my $type = $sdl_event->type;
    my $key = ( $type == 2 or $type == 3 ) ? $sdl_event->key_sym : '';

    if ( $type == 4 ) {
#      printf "You moved the mouse! x=%s y=%s xrel=%s yrel=%s\n",
#             $sdl_event->motion_x,
#             $sdl_event->motion_y,
#             $sdl_event->motion_xrel,
#             $sdl_event->motion_yrel
    }
#    elsif ( $type == 2 ) { print "You are pressing $key\n" }
#    elsif ( $type == 3 ) { print "You released $key\n" }
    elsif ( $type == 12 ) { exit }
#    else { print "TYPE $type UNKNOWN!\n" }

    if ( $type == 2 ) {
      exit if $key eq "q" or $key eq "escape";
    }
  }
}

# }}}

glEnable( GL_DEPTH_TEST );
glMatrixMode( GL_PROJECTION );
glLoadIdentity;
gluPerspective( 60, $WIDTH / $HEIGHT, 1, 1000 );
glTranslatef( 0, 0, -20 );

while ( 1 ) {
  handle_polls;
  glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
  glRotatef( .1, 1, 1, 1 );
  draw_scene;
  $sdl_app->sync;
}
